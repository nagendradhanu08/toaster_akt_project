{"version":3,"file":"credit-card.validator.js","sourceRoot":"","sources":["../src/credit-card.validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractControl, Validators } from '@angular/forms';\nimport { CreditCard } from './shared/credit-card';\n\nexport class CreditCardValidator {\n  static validateCCNumber(control: AbstractControl): any {\n    if (Validators.required(control) !== undefined && Validators.required(control) !== null) {\n      return {'ccNumber': false};\n    }\n\n    let num = control.value.toString().replace(/\\s+|-/g, '');\n\n    if (!/^\\d+$/.test(num)) {\n      return {'ccNumber': false};\n    }\n\n    let card = CreditCard.cardFromNumber(num);\n\n    if (!card) {\n      return {'ccNumber': false};\n    }\n\n    if (card.length.includes(num.length) && (card.luhn === false || CreditCard.luhnCheck(num))) {\n      return null;\n    }\n\n    return {'ccNumber': false};\n  }\n\n  static validateExpDate(control: AbstractControl): any {\n    if (Validators.required(control) !== undefined && Validators.required(control) !== null) {\n      return {'expDate': false };\n    }\n\n    if (typeof control.value !== 'undefined' && control.value.length >= 7) {\n      let [month, year] = control.value.split(/[\\s\\/]+/, 2),\n          prefix;\n\n      if ((year != null ? year.length : void 0) === 2 && /^\\d+$/.test(year)) {\n        prefix = new Date().getFullYear();\n        prefix = prefix.toString().slice(0, 2);\n        year = prefix + year;\n      }\n      month = parseInt(month, 10).toString();\n      year  = parseInt(year, 10).toString();\n\n      if (/^\\d+$/.test(month) && /^\\d+$/.test(year) && (month >= 1 && month <= 12)) {\n        let currentTime, expiry;\n        expiry = new Date(year, month);\n        currentTime = new Date();\n        expiry.setMonth(expiry.getMonth() - 1);\n        expiry.setMonth(expiry.getMonth() + 1, 1);\n\n        if (expiry > currentTime) {\n          return null;\n        }\n      }\n    }\n\n    return {'expDate': false };\n\n  }\n}\n"]}