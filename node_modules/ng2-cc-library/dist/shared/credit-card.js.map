{"version":3,"file":"credit-card.js","sourceRoot":"","sources":["../../src/shared/credit-card.ts"],"names":[],"mappings":"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","sourcesContent":["let defaultFormat = /(\\d{1,4})/g;\nlet cards = [\n  {\n    type: 'maestro',\n    patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],\n    format: defaultFormat,\n    length: [12, 13, 14, 15, 16, 17, 18, 19],\n    cvvLength: [3],\n    luhn: true\n  }, {\n    type: 'forbrugsforeningen',\n    patterns: [600],\n    format: defaultFormat,\n    length: [16],\n    cvvLength: [3],\n    luhn: true\n  }, {\n    type: 'dankort',\n    patterns: [5019],\n    format: defaultFormat,\n    length: [16],\n    cvvLength: [3],\n    luhn: true\n  }, {\n    type: 'visa',\n    patterns: [4],\n    format: defaultFormat,\n    length: [13, 16],\n    cvvLength: [3],\n    luhn: true\n  }, {\n    type: 'mastercard',\n    patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],\n    format: defaultFormat,\n    length: [16],\n    cvvLength: [3],\n    luhn: true\n  }, {\n    type: 'amex',\n    patterns: [34, 37],\n    format: /(\\d{1,4})(\\d{1,6})?(\\d{1,5})?/,\n    length: [15],\n    cvvLength: [3, 4],\n    luhn: true\n  }, {\n    type: 'dinersclub',\n    patterns: [30, 36, 38, 39],\n    format: /(\\d{1,4})(\\d{1,6})?(\\d{1,4})?/,\n    length: [14],\n    cvvLength: [3],\n    luhn: true\n  }, {\n    type: 'discover',\n    patterns: [60, 64, 65, 622],\n    format: defaultFormat,\n    length: [16],\n    cvvLength: [3],\n    luhn: true\n  }, {\n    type: 'unionpay',\n    patterns: [62, 88],\n    format: defaultFormat,\n    length: [16, 17, 18, 19],\n    cvvLength: [3],\n    luhn: false\n  }, {\n    type: 'jcb',\n    patterns: [35],\n    format: defaultFormat,\n    length: [16],\n    cvvLength: [3],\n    luhn: true\n  }\n];\n\nexport class CreditCard {\n\n  public static cards() {\n    return cards;\n  }\n\n  public static cardFromNumber(num) {\n    let card,\n        p,\n        pattern,\n        ref;\n    num = (num + '').replace(/\\D/g, '');\n\n    for (let i = 0, len = cards.length; i < len; i++) {\n      card = cards[i];\n      ref = card.patterns;\n\n      for (let j = 0, len1 = ref.length; j < len1; j++) {\n        pattern = ref[j];\n        p = pattern + '';\n\n        if (num.substr(0, p.length) === p) {\n          return card;\n        }\n      }\n    }\n  }\n\n  public static restrictNumeric(e): boolean {\n    let input;\n    if (e.metaKey || e.ctrlKey) {\n      return true;\n    }\n    if (e.which === 32) {\n      return false;\n    }\n    if (e.which === 0) {\n      return true;\n    }\n    if (e.which < 33) {\n      return true;\n    }\n    input = String.fromCharCode(e.which);\n    return !!/[\\d\\s]/.test(input);\n  }\n\n  public static hasTextSelected(target) {\n    return target.selectionStart !== null && target.selectionStart !== target.selectionEnd;\n  }\n\n  public static cardType(num) {\n    if (!num) {\n      return num;\n    }\n\n    let card = this.cardFromNumber(num);\n\n    if (card !== null && typeof card !== 'undefined') {\n      return card.type;\n    } else {\n      return null;\n    }\n  }\n\n  public static formatCardNumber(num) {\n    let card,\n        groups,\n        upperLength;\n\n    num = num.replace(/\\D/g, '');\n    card = this.cardFromNumber(num);\n\n    if (!card) {\n      return num;\n    }\n\n    upperLength = card.length[card.length.length - 1];\n    num = num.slice(0, upperLength);\n\n    if (card.format.global) {\n      let matches = num.match(card.format);\n      if (matches != null) {\n        return matches.join(' ');\n      }\n    } else {\n      groups = card.format.exec(num);\n      if (groups == null) {\n        return;\n      }\n      groups.shift();\n      delete(groups.index);\n      delete(groups.input);\n      return groups.join(' ');\n    }\n  }\n\n  public static safeVal(value, target) {\n    let cursor = null,\n        last   = target.value,\n        result: any = false;\n\n    try {\n      cursor = target.selectionStart;\n    } catch (error) {}\n\n    target.value = value;\n\n    if (cursor !== null && target === document.activeElement) {\n      if (cursor === last.length) {\n        cursor = value.length;\n      }\n\n      if (last !== value) {\n        let prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9),\n            currPair = value.slice(cursor - 1, +cursor + 1 || 9e9),\n            digit = value[cursor];\n\n        if (/\\d/.test(digit) && prevPair === (`${digit} `) && currPair === (` ${digit}`)) {\n          cursor = cursor + 1;\n        }\n      }\n\n     result = cursor;\n    }\n    return result;\n  }\n\n  public static isCardNumber(key, target) {\n    let card,\n        digit,\n        value,\n        result;\n    digit = String.fromCharCode(key);\n    if (!/^\\d+$/.test(digit)) {\n      return false;\n    }\n    if (CreditCard.hasTextSelected(target)) {\n      return true;\n    }\n    value = (target.value + digit).replace(/\\D/g, '');\n    card = CreditCard.cardFromNumber(value);\n    if (card) {\n      result = value.length <= card.length[card.length.length - 1];\n    } else {\n      result = value.length <= 16;\n    }\n\n    return result;\n  }\n\n  public static restrictExpiry(key, target) {\n    let digit,\n        value;\n    digit = String.fromCharCode(key);\n    if (!/^\\d+$/.test(digit) || this.hasTextSelected(target)) {\n      return false;\n    }\n    value = `${target.value}${digit}`.replace(/\\D/g, '');\n\n    return value.length > 6;\n  }\n\n  public static replaceFullWidthChars(str) {\n    if (str === null) {\n      str = '';\n    }\n\n    let chr,\n        idx,\n        fullWidth = '\\uff10\\uff11\\uff12\\uff13\\uff14\\uff15\\uff16\\uff17\\uff18\\uff19',\n        halfWidth = '0123456789',\n        value = '',\n        chars = str.split('');\n\n    for (let i = 0; i < chars.length; i++) {\n      chr = chars[i];\n      idx = fullWidth.indexOf(chr);\n      if (idx > -1) {\n        chr = halfWidth[idx];\n      }\n      value += chr;\n    }\n    return value;\n  }\n\n  public static formatExpiry(expiry) {\n    let parts = expiry.match(/^\\D*(\\d{1,2})(\\D+)?(\\d{1,4})?/),\n        mon,\n        sep,\n        year;\n\n    if (!parts) {\n      return '';\n    }\n\n    mon  = parts[1] || '';\n    sep  = parts[2] || '';\n    year = parts[3] || '';\n\n    if (year.length > 0) {\n      sep = ' / ';\n    } else if (sep === ' /') {\n      mon = mon.substring(0, 1);\n      sep = '';\n    } else if (mon.length === 2 || sep.length > 0) {\n      sep = ' / ';\n    } else if (mon.length === 1 && (mon !== '0' && mon !== '1')) {\n      mon = `0${mon}`;\n      sep = ' / ';\n    }\n    return `${mon}${sep}${year}`;\n  }\n\n  public static restrictCvc(key, target) {\n    let digit = String.fromCharCode(key);\n    if (!/^\\d+$/.test(digit) || this.hasTextSelected(target)) {\n      return false;\n    }\n    let val = `${target.value}${digit}`;\n    return val.length <= 4;\n  }\n\n  public static luhnCheck(num) {\n    let digit,\n        digits = num.split('').reverse(),\n        odd    = true,\n        sum    = 0;\n\n    for (let i = 0; i < digits.length; i++) {\n      digit = digits[i];\n      digit = parseInt(digit, 10);\n      if ((odd = !odd)) {\n        digit *= 2;\n      }\n      if (digit > 9) {\n        digit -= 9;\n      }\n      sum += digit;\n    }\n\n    return sum % 10 === 0;\n  }\n}\n"]}